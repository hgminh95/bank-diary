#!/usr/bin/env python3

import os
import cmd

from bank_diary.parser.dbs import DbsParser
from bank_diary.common.db import SQLiteDatabase
import bank_diary.common.stats as stats
import bank_diary.common.syntax as syntax

from bank_diary.defaults import classifier


class DiaryShell(cmd.Cmd):
    intro = 'Welcome to bdiary shell. Type help or ? to list commands.\n'
    prompt = '(diary) '

    def __init__(self):
        super().__init__()

        self.db = SQLiteDatabase(os.path.expanduser("~/.bdiary/db"))
        self.classifier_path = ''

    def do_load(self, args):
        """load database or custom classifier

        Syntax: load <path-to-entity>
        where entity can be either database file or custom classifier
        """
        path = args

        if len(path) == 0:
            return

        if path.endswith('.py'):
            self.classifier_path = path
            try:
                import importlib.util
                spec = importlib.util.spec_from_file_location('custom', path)
                custom = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(custom)

                global classifier
                classifier = custom.classifier
            except Exception as e:
                print("<error> Failed to load custom classifier at", path)
                print("")
        else:
            self.db = SQLiteDatabase(path)

    def do_reload(self, args):
        self.do_load(self.classifier_path)

    def do_import(self, args):
        """Import data from csv file"""
        csv_file = args

        self.db.insert_bulk([t for t in DbsParser().parse_file(csv_file)])

    def do_i(self, args):
        """Same as import"""
        self.do_import(args)

    def do_list(self, args):
        """List transactions

        Syntax: list [where <cond>[,<cond>]+] [at <period>]
        Example:
            list where category=housing at 2018
        """
        args = syntax.Tokenizer().tokenize(args)

        ok, res = syntax.Parser().parse_line('list', *args)
        if not ok:
            print("Syntax Error:", res)
            return

        _, (conds, period) = res

        recs = self.find_records(conds, period)

        print("Found {} transactions.".format(len(recs)))

        for rec in recs:
            print("> {}".format(rec))

    def do_l(self, args):
        """Same as list"""
        self.do_list(args)

    def do_count(self, args):
        """Count transactions

        Syntax: count [where <cond>[,<cond>]+] [at <period>]
        Example:
            count where category=housing at 2018
        """
        args = syntax.Tokenizer().tokenize(args)

        ok, res = syntax.Parser().parse_line('list', *args)
        if not ok:
            print("Syntax Error:", res)
            return

        _, (conds, period) = res

        recs = self.find_records(conds, period)
        print("Found {} transactions.".format(len(recs)))

    def do_c(self, args):
        """Same as count"""
        self.do_count(args)

    def do_get(self, args):
        """Aggregate information

        Syntax: get <target> by <group_by> [at <period>]
        Example:
            get sum by year, month
        """
        args = syntax.Tokenizer().tokenize(args)

        ok, res = syntax.Parser().parse_line('get', *args)
        if not ok:
            print("Syntax Error:", res)
            return

        _, (target, group_by, period) = res

        records = self.db.select_period(period)
        for rec in records:
            rec.category = classifier.classify(rec)

        print(stats.aggregate(records, target, group_by))

    def do_exit(self, args):
        """Quit"""
        return True

    def do_quit(self, args):
        """Exit"""
        return True

    def do_q(self, args):
        return True

    def find_records(self, conds, period):
        records = self.db.select_period(period)
        selected = []
        for rec in records:
            rec.category = classifier.classify(rec)
            ok = True
            for field, value in conds:
                if getattr(rec, field) != value:
                    ok = False
                    break
            if ok:
                selected.append(rec)

        return selected


if __name__ == '__main__':
    shell = DiaryShell()

    config_path = os.path.expanduser("~/.bdiary/config")
    if os.path.exists(config_path) and os.path.isfile(config_path):
        print('Load config from', config_path)
        with open(config_path, 'rt') as f:
            for line in f:
                shell.onecmd(line)

    shell.cmdloop()
